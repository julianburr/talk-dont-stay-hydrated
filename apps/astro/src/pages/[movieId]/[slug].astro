---
import * as Feather from "astro-feather";
import markdown from "markdown-it";
import moment from "moment";

import { fetchMovie } from "@workspace/shared/data/fetchMovie";

import Layout from "../../layouts/Layout.astro";
import LikeButton from "../../components/LikeButton.astro";

const md = markdown();

const id = Astro.params.movieId;
const movie = await fetchMovie(id);

const searchTerm = Astro.url.searchParams.get("q") as string;
---

<Layout>
  <div
    class="sm:p-12 w-full max-w-[880px] h-full sm:h-[100svh] flex flex-col self-center"
  >
    <div
      class="w-full h-full sm:overflow-hidden sm:rounded-md flex flex-col bg-gray-100 sm:bg-gray-200"
    >
      <div
        class="flex flex-col sm:flex-row sm:flex-1 sm:h-full w-full overflow-hidden"
      >
        <div class="flex flex-col w-full sm:h-full bg-gray-100/50 relative">
          <div
            class="absolute top-4 left-4 right-4 flex flex-row justify-between"
          >
            <a
              href={`/?q=${encodeURIComponent(searchTerm)}`}
              class="bg-white/70 hover:bg-white focus:bg-white transition-all text-black w-10 h-10 flex items-center justify-center rounded-full shadow-gray-100 shadow-[0_0_40px_0]"
            >
              <Feather.ArrowLeftIcon customClasses="h-4" />
            </a>
            <LikeButton movieId={id} />
          </div>

          <img
            src={movie?.short?.image}
            alt={movie?.short?.name}
            class="w-full aspect-[4/5] sm:aspect-auto sm:h-full object-cover"
          />

          <div
            class="absolute p-6 pt-20 bottom-0 left-0 right-0 bg-gradient-to-t from-gray-100 sm:from-black"
          >
            <h1 class="text-2xl font-bold leading-tight text-balance">
              {movie?.top?.titleText?.text}
            </h1>
            <div class="mt-2 text-sm text-white/70 flex flex-col">
              <span>
                {
                  [
                    movie?.short?.datePublished
                      ? moment(movie?.short?.datePublished).format("YYYY")
                      : undefined,
                    movie?.top?.runtime?.displayableProperty?.value?.plainText,
                  ]
                    .filter(Boolean)
                    .join(", ")
                }
              </span>
              <span>{movie?.short?.genre?.join(", ")}</span>
            </div>
          </div>
        </div>

        <div class="flex flex-col h-full w-full p-6 sm:overflow-auto">
          <div
            set:html={md.render(movie?.top?.plot?.plotText?.plainText || "")}
          />

          {
            !!movie?.short?.director?.length && (
              <div class="mt-4">
                <p class="uppercase font-bold text-xs text-white/70">
                  {movie?.short?.director?.length > 1
                    ? "Directors"
                    : "Director"}
                </p>
                <p>
                  {movie?.short?.director
                    ?.map((person: any) => person?.name)
                    ?.join(", ")}
                </p>
              </div>
            )
          }

          {
            !!movie?.short?.actor?.length && (
              <div class="mt-4">
                <p class="uppercase font-bold text-xs text-white/70">Cast</p>
                <p>
                  {movie?.short?.actor
                    ?.map((person: any) => person?.name)
                    ?.join(", ")}
                </p>
              </div>
            )
          }

          {
            !!movie?.short?.review?.reviewBody && (
              <div class="mt-4">
                <p class="uppercase font-bold text-xs text-white/70">
                  Review: <span set:html={movie?.short?.review?.name} />
                </p>
                <div set:html={md.render(movie?.short?.review?.reviewBody)} />
              </div>
            )
          }
        </div>
      </div>
    </div>
  </div>
</Layout>
